package client;import org.hyperledger.fabric.sdk.BlockEvent.TransactionEvent;import org.hyperledger.fabric.sdk.*;import org.hyperledger.fabric.sdk.TransactionRequest.Type;import org.hyperledger.fabric.sdk.exception.ChaincodeEndorsementPolicyParseException;import org.hyperledger.fabric.sdk.exception.InvalidArgumentException;import org.hyperledger.fabric.sdk.exception.ProposalException;import java.io.File;import java.io.IOException;import java.util.Collection;import java.util.HashMap;import java.util.Map;import java.util.concurrent.CompletableFuture;import java.util.logging.Level;import java.util.logging.Logger;import static java.nio.charset.StandardCharsets.UTF_8;public class ChannelClient {    private String name;    private Channel channel;    private FabricClient fabClient;    public ChannelClient(String name, Channel channel, FabricClient fabClient) {        this.name = name;        this.channel = channel;        this.fabClient = fabClient;    }    public String getName() {        return name;    }    public void setName(String name) {        this.name = name;    }    public void setChannel(Channel channel) {        this.channel = channel;    }    public FabricClient getFabClient() {        return fabClient;    }    public void setFabClient(FabricClient fabClient) {        this.fabClient = fabClient;    }    public Channel getChannel() {        return null;    }    public Collection<ProposalResponse> queryByChainCode(String chaincodeName, String functionName, String[] args) throws ProposalException, InvalidArgumentException {        Logger.getLogger(ChannelClient.class.getName()).log(Level.INFO, "Querying " + functionName + " on channel " + channel.getName());        QueryByChaincodeRequest request = fabClient.getInstance().newQueryProposalRequest();        ChaincodeID ccid = ChaincodeID.newBuilder().setName(chaincodeName).build();        request.setChaincodeID(ccid);        request.setFcn(functionName);        if (args != null)            request.setArgs(args);        Collection<ProposalResponse> response = channel.queryByChaincode(request);        return response;    }    public Collection<ProposalResponse> instantiateChainCode(String chaincodeName, String version, String chaincodePath,                                                             String language, String functionName, String[] functionArgs, String policyPath)            throws InvalidArgumentException, ProposalException, ChaincodeEndorsementPolicyParseException, IOException {        Logger.getLogger(ChannelClient.class.getName()).log(Level.INFO,                "Instantiate proposal request " + chaincodeName + " on channel " + channel.getName()                        + " with Fabric client " + fabClient.getInstance().getUserContext().getMspId() + " "                        + fabClient.getInstance().getUserContext().getName());        InstantiateProposalRequest instantiateProposalRequest = fabClient.getInstance()                .newInstantiationProposalRequest();        instantiateProposalRequest.setProposalWaitTime(180000);        ChaincodeID.Builder chaincodeIDBuilder = ChaincodeID.newBuilder().setName(chaincodeName).setVersion(version)                .setPath(chaincodePath);        ChaincodeID ccid = chaincodeIDBuilder.build();        Logger.getLogger(ChannelClient.class.getName()).log(Level.INFO,                "Instantiating Chaincode ID " + chaincodeName + " on channel " + channel.getName());        instantiateProposalRequest.setChaincodeID(ccid);        if (language.equals(Type.GO_LANG.toString()))            instantiateProposalRequest.setChaincodeLanguage(Type.GO_LANG);        else            instantiateProposalRequest.setChaincodeLanguage(Type.JAVA);        instantiateProposalRequest.setFcn(functionName);        instantiateProposalRequest.setArgs(functionArgs);        Map<String, byte[]> tm = new HashMap<>();        tm.put("HyperLedgerFabric", "InstantiateProposalRequest:JavaSDK".getBytes(UTF_8));        tm.put("method", "InstantiateProposalRequest".getBytes(UTF_8));        instantiateProposalRequest.setTransientMap(tm);        if (policyPath != null) {            ChaincodeEndorsementPolicy chaincodeEndorsementPolicy = new ChaincodeEndorsementPolicy();            chaincodeEndorsementPolicy.fromYamlFile(new File(policyPath));            instantiateProposalRequest.setChaincodeEndorsementPolicy(chaincodeEndorsementPolicy);        }        Collection<ProposalResponse> responses = channel.sendInstantiationProposal(instantiateProposalRequest);        CompletableFuture<TransactionEvent> cf = channel.sendTransaction(responses);        Logger.getLogger(ChannelClient.class.getName()).log(Level.INFO,                "Chaincode " + chaincodeName + " on channel " + channel.getName() + " instantiation " + cf);        return responses;    }    public Collection<ProposalResponse> sendTransactionProposal(TransactionProposalRequest proposalRequest) throws InvalidArgumentException, ProposalException {        Logger.getLogger(ChannelClient.class.getName()).log(Level.INFO, "Sending transaction proposal on channel "                + channel.getName());        Collection<ProposalResponse> responses = channel.sendTransactionProposal(proposalRequest, channel.getPeers());        for (ProposalResponse response : responses) {            String stringResponse = new String(response.getChaincodeActionResponsePayload());            Logger.getLogger(ChannelClient.class.getName()).log(Level.INFO,                    "Transaction proposal on channel " + channel.getName() + " " + response.getMessage() + " "                            + response.getStatus() + " with transaction id:" + response.getTransactionID());            Logger.getLogger(ChannelClient.class.getName()).log(Level.INFO,stringResponse);        }        CompletableFuture<TransactionEvent> eventCompletableFuture =  channel.sendTransaction(responses);        Logger.getLogger(ChannelClient.class.getName()).log(Level.INFO,eventCompletableFuture.toString());        return responses;    }}